# -*- coding: utf-8 -*-
"""M23MAC011_task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B8TBQqZJnxhcTUHrrTNjtjF8r-95DzpJ
"""

import numpy as np
import pandas as pd
from scipy import linalg
data = pd.read_csv("mnist_train.csv")

# Separate features and targets
X = data.drop('label', axis=1)
y = data['label']

def pca(data, num_components):


    # Step 1: Perform Singular Value Decomposition (SVD)
    U, S, VT = linalg.svd(data, full_matrices=False)

    # Step 2: Select the top 'num_components' principal components
    top_components = VT[:num_components]

    # Step 3: Project the data onto the selected components
    projected_data = np.dot(data, top_components.T)

    return projected_data

#Standardize the data (mean centering)
mean = np.mean(X, axis=0)
centered_data = X - mean

data = centered_data/255
data.dropna(inplace=True)

# Performing PCA with 32, 62 and 128 components
reduced_data1 = pca(data, 32)
reduced_data2 = pca(data, 64)
reduced_data3 = pca(data, 128)

#now performing gmm clustering after pca using sklearn library
from sklearn.mixture import GaussianMixture

#pca 128 and number of cluster = 10
num_clusters = 10
gmm = GaussianMixture(n_components=num_clusters, random_state=0)
labels1 = gmm.fit_predict(reduced_data3)


#pca 128 and number of cluster = 7
num_clusters = 7
gmm = GaussianMixture(n_components=num_clusters, random_state=0)
labels2 = gmm.fit_predict(reduced_data3)


#pca 128 and number of cluster = 4
num_clusters = 4
gmm = GaussianMixture(n_components=num_clusters, random_state=0)
labels3 = gmm.fit_predict(reduced_data3)


#pca 64 and number of cluster = 10
num_clusters = 10
gmm = GaussianMixture(n_components=num_clusters, random_state=0)
labels4 = gmm.fit_predict(reduced_data2)



#pca 64 and number of cluster = 7
num_clusters = 7
gmm = GaussianMixture(n_components=num_clusters, random_state=0)
labels5 = gmm.fit_predict(reduced_data2)



#pca 64 and number of cluster = 4
num_clusters = 4
gmm = GaussianMixture(n_components=num_clusters, random_state=0)
labels6 = gmm.fit_predict(reduced_data2)



#pca 32 and number of cluster = 10
num_clusters = 10
gmm = GaussianMixture(n_components=num_clusters, random_state=0)
labels7 = gmm.fit_predict(reduced_data1)



#pca 32 and number of cluster = 7
num_clusters = 7
gmm = GaussianMixture(n_components=num_clusters, random_state=0)
labels8 = gmm.fit_predict(reduced_data1)



#pca 32 and number of cluster = 4
num_clusters = 4
gmm = GaussianMixture(n_components=num_clusters, random_state=0)
labels9 = gmm.fit_predict(reduced_data1)

X = np.array(X)

# defining function to visualize the images

import matplotlib.pyplot as plt
def show_image(num, labels):
    # Create a dictionary to store images for each cluster
    cluster_images = {}
    for cluster in range(num):
        cluster_images[cluster] = []

    # Collect images for each cluster
    for i in range(len(X)):
        cluster = labels[i]
        cluster_images[cluster].append(X[i].reshape(28, 28))


    for cluster in range(num):
        plt.suptitle(f'Samples of Cluster {cluster+1}')
        for i in range(10):
            plt.subplot(3, 5, i + 1)
            sample_image = cluster_images[cluster][i]
            plt.imshow(sample_image, cmap='gray')

            plt.axis('off')

        plt.show()

#images obtaiained When Number of PCA Component is 128 and Number of cluster is 10:
show_image(10, labels1)

#images obtaiained When Number of PCA Component is 128 and Number of cluster is 7:
show_image(7, labels2)

#images obtaiained When Number of PCA Component is 128 and Number of cluster is 4:
show_image(4, labels3)

#images obtaiained When Number of PCA Component is 64 and Number of cluster is 10:
show_image(10, labels4)

#images obtaiained When Number of PCA Component is 64 and Number of cluster is 7:
show_image(7, labels5)

#images obtaiained When Number of PCA Component is 64 and Number of cluster is 4:
show_image(4, labels6)

#images obtaiained When Number of PCA Component is 32 and Number of cluster is 10:
show_image(10, labels7)

#images obtaiained When Number of PCA Component is 32 and Number of cluster is 7:
show_image(7, labels8)

#images obtaiained When Number of PCA Component is 32 and Number of cluster is 4:
show_image(4, labels9)

# TO FIND THE OPTIMAL NUMBER OF component, we will use the bruteforce method to check for each pca whether it is giving more that thresold amount of information or not


def find_optimal_num_components(data, threshold=0.95):
    # Calculate the cumulative explained variance for different numbers of components
    explained_variances = []
    total_var = np.var(data, axis=0).sum()
    for num_components in range(1, data.shape[1] + 1, 5):
        projected_data = pca(data, num_components)
        explained_var = np.var(projected_data, axis=0).sum() / total_var
        explained_variances.append(explained_var)

        # Check if the threshold is reached
        if explained_var >= threshold:
            return num_components

    return data.shape[1]

print("The Optimal number of component for pca is: " , find_optimal_num_components(X))